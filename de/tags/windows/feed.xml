<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Windows on diecknet</title>
    <link>https://diecknet.de/de/tags/windows/</link>
    <description>Recent content in Windows on diecknet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    <lastBuildDate>Wed, 28 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://diecknet.de/de/tags/windows/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PowerShell: Zugriff auf Umgebungsvariablen</title>
      <link>https://diecknet.de/de/2024/02/28/powershell-environment-variables/</link>
      <pubDate>Wed, 28 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://diecknet.de/de/2024/02/28/powershell-environment-variables/</guid>
      <description>Per PowerShell auf Umgebungsvariablen zugreifen - das geht ganz einfach.
üé¨ Ich habe √ºbrigens auch ein Video zu dem Thema erstellt.
Umgebungsvariable per $Env:-Variable auslesen Die einfachste M√∂glichkeit ist per $Env:-Variable. Gebt daf√ºr einfach $Env ein, dann einen Doppelpunkt und dann den Namen der Umgebungsvariable von der ihr den Wert auslesen wollt.
1 $Env:username Dadurch wird der Username des aktuell angemeldeten Users ausgegeben.
Das funktioniert √ºbrigens plattform√ºbergreifend, also auch zum Beispiel unter Linux.</description>
    </item>
    
    <item>
      <title>PowerShell: √úberpr√ºfen ob Admin-Rechte vorhanden sind</title>
      <link>https://diecknet.de/de/2024/02/20/powershell-check-admin-rights/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://diecknet.de/de/2024/02/20/powershell-check-admin-rights/</guid>
      <description>Wenn ihr ein PowerShell Skript erstellt habt, was Aktionen ausf√ºhren soll, die Adminrechte erfordern, dann k√∂nnt ihr das auch per Code √ºberpr√ºfen. Damit k√∂nnt ihr sicherstellen, dass euer Skript erfolgreich ausgef√ºhrt werden kann. Am einfachsten geht das mit einer Requires-Anweisung. üé¨ Ich habe √ºbrigens auch ein Video zu dem Thema erstellt.
Admin-Rechte per Requires Anweisung erfordern 1 #Requires -RunAsAdministrator Diese Zeile kann an eine beliebigen Stelle im PowerShell Code eingef√ºgt werden.</description>
    </item>
    
    <item>
      <title>PowerShell: √úbersetzte Security Identifier Namen herausfinden</title>
      <link>https://diecknet.de/de/2024/01/17/powershell-localized-security-identifiers/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://diecknet.de/de/2024/01/17/powershell-localized-security-identifiers/</guid>
      <description>Security Identifiers sind dazu da, um bestimmte Security Prinzipale oder Gruppen unter Windows zu identifizieren. Leider sind die dazugeh√∂rigen Namen lokalisiert, also sind zum Beispiel in einem deutschsprachigen System anders als in einem englischsprachigen System.
Beispielsweise hei√üt die eingebaute Administratorgruppe auf Englisch BUILTIN\ADMINISTRATORS und auf Deutsch VORDEFINIERT\Administratoren. Oder das Englische NT AUTHORITY\SYSTEM wird an einem Deutschen System zu NT-AUTORIT√ÑT\SYSTEM. Das finde ich richtig abgefahren! Da wird auf einmal ein Leerzeichen durch ein Bindestrich ersetzt.</description>
    </item>
    
  </channel>
</rss>
