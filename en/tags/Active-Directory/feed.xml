<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Active Directory on diecknet</title>
    <link>https://diecknet.de/en/tags/Active-Directory/</link>
    <description>Recent content in Active Directory on diecknet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://diecknet.de/en/tags/Active-Directory/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Retrieve infos about Active Directory Based Activation via PowerShell</title>
      <link>https://diecknet.de/en/2024/11/25/powershell-show-adba-infos/</link>
      <pubDate>Mon, 25 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>https://diecknet.de/en/2024/11/25/powershell-show-adba-infos/</guid>
      <description>If you quickly want to retrieve infos about Active Directory Based Activation (ADBA) in your domain, you can use this PowerShell One-liner:
1 Get-ADDomain | %{Get-ADObject -SearchBase &amp;#34;CN=Activation Objects,CN=Microsoft SPP,CN=Services,CN=Configuration,$($_.DistinguishedName)&amp;#34; -LDAPFilter &amp;#34;(objectclass=msspp-activationobject)&amp;#34; -Properties * -ErrorAction SilentlyContinue | fl displayName,DistinguishedName,Name,msspp-csvlkpartialproductkey } I haven&amp;rsquo;t tested it in a multi-domain environment, but I think it should work.
Explanation The code uses aliases, which are not great in scripts, but neat in One-Liners. It uses Get-ADDomain to determine the Distinguished Name for the Domain.</description>
    </item>
    
    <item>
      <title>PowerShell: Filter Active Directory Computers</title>
      <link>https://diecknet.de/en/2024/08/07/powershell-active-directory-computers-filtering/</link>
      <pubDate>Wed, 07 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://diecknet.de/en/2024/08/07/powershell-active-directory-computers-filtering/</guid>
      <description>I recently worked on a client project, where I had to do some work around Active Directory Computers. I used PowerShell and some light filtering and processing. And now I share those examples, and hopefully someone finds them interesting or helpful. Maybe it will be me, who finds it interesting in the future. In that case: Moin Andi! ðŸ‘‹
Example 1: Filter Computer by Operating System Version The AD attribute OperatingSystemVersion holds the OS version with the build number in a format like this: 10.</description>
    </item>
    
    <item>
      <title>Exchange EAC stopped working after decomissioning all Mailbox Databases</title>
      <link>https://diecknet.de/en/2023/05/16/exchange-eac-not-working-after-decomissioning-all-databases/</link>
      <pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://diecknet.de/en/2023/05/16/exchange-eac-not-working-after-decomissioning-all-databases/</guid>
      <description>I had this weird issue with a Exchange Server environment: The company had an Exchange Server 2016 DAG and migrated all User Mailboxes to Exchange Online. I then installed a fresh Exchange Server 2019 for Recipient Management and SMTP-Relay. To use the Exchange Server 2019 Hybrid License, I did not create a Mailbox Database. I removed all remaining System Mailboxes and Arbitration Mailboxes from the Exchange 2016 Servers. I decomissioned the DAG and uninstalled Exchange from the old Servers.</description>
    </item>
    
  </channel>
</rss>
